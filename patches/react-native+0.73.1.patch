diff --git a/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm b/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
index b7b2db1..087dfe3 100644
--- a/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
+++ b/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
@@ -28,6 +28,9 @@ void RCTSetCustomNSURLSessionConfigurationProvider(NSURLSessionConfigurationProv
 @implementation RCTHTTPRequestHandler {
   NSMapTable *_delegates;
   NSURLSession *_session;
+    // Psipon modification start
+    NSURLSessionConfiguration *_urlSessionConfiguration;
+    // Psiphon modification end
   std::mutex _mutex;
 }
 
@@ -41,6 +44,9 @@ RCT_EXPORT_MODULE()
   std::lock_guard<std::mutex> lock(_mutex);
   [self->_session invalidateAndCancel];
   self->_session = nil;
+    // Psiphon modification start
+    self->_urlSessionConfiguration = nil;
+    // Psiphon modification end
 }
 
 // Needs to lock before call this method.
@@ -67,6 +73,20 @@ RCT_EXPORT_MODULE()
 - (NSURLSessionDataTask *)sendRequest:(NSURLRequest *)request withDelegate:(id<RCTURLRequestDelegate>)delegate
 {
   std::lock_guard<std::mutex> lock(_mutex);
+    // Psiphon modification start
+    if (urlSessionConfigurationProvider) {
+        NSURLSessionConfiguration *configuration;
+        configuration = urlSessionConfigurationProvider();
+        // Reset the session and delegates if the URL session configuration from the provider
+        // is new, to ensure they are recreated with this updated configuration.
+        if (_urlSessionConfiguration != configuration) {
+            _session = nil;
+            _delegates = nil;
+        }
+        _urlSessionConfiguration = configuration;
+    }
+    // Psiphon modification end
+
   // Lazy setup
   if (!_session && [self isValid]) {
     // You can override default NSURLSession instance property allowsCellularAccess (default value YES)
@@ -81,8 +101,9 @@ RCT_EXPORT_MODULE()
     callbackQueue.maxConcurrentOperationCount = 1;
     callbackQueue.underlyingQueue = [[_moduleRegistry moduleForName:"Networking"] methodQueue];
     NSURLSessionConfiguration *configuration;
-    if (urlSessionConfigurationProvider) {
-      configuration = urlSessionConfigurationProvider();
+      // Psiphon modification, use previously stored URL session configuration from the provider
+    if (_urlSessionConfiguration) {
+      configuration = _urlSessionConfiguration;
     } else {
       configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
       // Set allowsCellularAccess to NO ONLY if key ReactNetworkForceWifiOnly exists AND its value is YES
